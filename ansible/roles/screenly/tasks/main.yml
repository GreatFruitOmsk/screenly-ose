- name: Ensure folders exist
  file:
    path: "/home/pi/{{ item }}"
    state: directory
    owner: pi
    group: pi
  with_items:
    - .screenly
    - screenly_assets

- name: Copy Screenly default config
  copy:
    owner: pi
    group: pi
    src: screenly.conf
    dest: /home/pi/.screenly/screenly.conf
    force: no

- name: Remove deprecated parameter "listen"
  lineinfile:
    regexp: '^.*listen.*'
    state: absent
    dest: /home/pi/.screenly/screenly.conf

- name: Install pip dependencies
  pip: requirements=/home/pi/screenly/requirements.host.txt

- name: Create default assets database if does not exists
  copy:
    owner: pi
    group: pi
    src: screenly.db
    dest: /home/pi/.screenly/screenly.db
    force: no

- name: Run database migration
  become: no
  command: python /home/pi/screenly/bin/migrate.py
  register: migrate

- debug: msg="{{ migrate.stdout }}"

- name: Copy screenly_utils.sh
  copy:
    src: screenly_utils.sh
    dest: /usr/local/bin/screenly_utils.sh
    mode: 0755
    owner: root
    group: root

- cron:
    name: Cleanup screenly_assets
    minute: 0
    hour: 1
    job: "/usr/local/bin/screenly_utils.sh cleanup"
    user: pi

- name: Copy screenly_overrides
  copy:
    src: screenly_overrides
    dest: /etc/sudoers.d/screenly_overrides
    mode: 0440
    owner: root
    group: root

- name: Check if deprecated systemd services exists
  stat:
    path: /etc/systemd/system/X.service
  register: x_service

- set_fact: x_service_exist="{{x_service.stat.exists}}"

- name: Disable deprecated systemd services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ screenly_systemd_units }}"
  when: x_service_exist

- name: Remove deprecated systemd units
  file:
    path: "/etc/systemd/system/{{ item }}"
    state: absent
  with_items: "{{ screenly_systemd_units }}"

- name: Check /proc/device-tree/model file
  command: cat /proc/device-tree/model
  register: model_file

- debug:
    msg: "Device type: {{ device_type }}"

- debug:
    msg: "Use {{ docker_tag }} version of images."

- name: Pull screenly-server image
  command: balena pull screenly/screenly-ose-server:{{ docker_tag }}

- name: Pull screenly-viewer image
  command: balena pull screenly/screenly-ose-viewer:{{ docker_tag }}-{{ device_type }}

- name: Pull screenly-websocket-server image
  command: balena pull screenly/screenly-ose-websocket:{{ docker_tag }}

- name: Get containers list
  command: balena container ls -a
  register: containers

- name: Stop screenly-server container
  command: balena stop screenly-ose-server
  when: not containers.stdout.find('screenly-ose-server') == -1

- name: Remove screenly-server container
  command: balena rm screenly-ose-server
  when: not containers.stdout.find('screenly-ose-server') == -1

- name: Create screenly-server container
  command: >
    balena run -td
    --privileged=true
    --name=screenly-ose-server
    --network=host
    --restart=unless-stopped
    -v /home/pi/screenly:/home/pi/screenly
    -v /home/pi/.screenly:/home/pi/.screenly
    -v /home/pi/screenly_assets:/home/pi/screenly_assets
    screenly/screenly-ose-server:{{ docker_tag }}

- name: Stop screenly-viewer container
  command: balena stop screenly-ose-viewer
  when: not containers.stdout.find('screenly-ose-viewer') == -1

- name: Remove screenly-viewer container
  command: balena rm screenly-ose-viewer
  when: not containers.stdout.find('screenly-ose-viewer') == -1

- name: Create screenly-viewer container
  command: >
    balena run -td
    --privileged=true
    --name=screenly-ose-viewer
    --network=host
    --restart=unless-stopped
    -v /home/pi/screenly:/home/pi/screenly
    -v /home/pi/.screenly:/home/pi/.screenly
    -v /home/pi/screenly_assets:/home/pi/screenly_assets
    screenly/screenly-ose-viewer:{{ docker_tag }}-{{ device_type }}

- name: Stop screenly-websocket container
  command: balena stop screenly-ose-websocket
  when: not containers.stdout.find('screenly-ose-websocket') == -1

- name: Remove screenly-websocket container
  command: balena rm screenly-ose-websocket
  when: not containers.stdout.find('screenly-ose-websocket') == -1

- name: Create screenly-websocket-server container
  command: >
    balena run -td
    --privileged=true
    --name=screenly-ose-websocket
    --network=host
    --restart=unless-stopped
    -v /home/pi/screenly:/home/pi/screenly
    -v /home/pi/.screenly:/home/pi/.screenly
    screenly/screenly-ose-websocket:{{ docker_tag }}
